digraph d {
node [shape=component style=filled fillcolor=grey];

subgraph cluster_app {
    label="application";
    ucp_doc [label="manage\ndocuments" shape=ellipse];
    ucp_sub [label="manage\nsubscriptions" shape=ellipse];
    ucp_msg [label="manage\nmessages" shape=ellipse];
    uc_rx_callback [label="receive\ncallback" shape=ellipse];
}

subgraph cluster_national_infrastructure {
    label="National Infrastructure"

    subgraph cluster_infrastructure {
        label="Regulated Community Front Office";
        subgraph cluster_obj {
            label="object_api";
            doc_api [label="object\nAPI" shape=component];
            uc_record_object [
                label="record\nobject"
                shape=ellipse
                fillcolor=orange
            ];
	    uc_authenticated_object_access [
                label="authenticated\nobject access"
                shape=ellipse
                fillcolor=orange
            ];
	}
        websub [label="websub\nservice" fillcolor=purple];
        subgraph cluster_message_tx_api {
            label="message_tx_api";
            msg_api [label="message\nAPI" shape=component];
            uc_check_message [
                label="get message\nby reference id"
                shape=ellipse
                fillcolor=orange
            ];
            uc_submit_message [
                label="post message\nto api inbox"
                shape=ellipse
                fillcolor=orange
            ];
        }
    }

    subgraph cluster_international {
        label="Inter Government Front Office";

        subgraph cluster_message_rx_api {
            label="message_rx_api";
            post_msg_from_bc [
                label="POST message\n(from blockchain)"
                shape=ellipse
            ];
            reception_api [label="message\nreception\nAPI"]
            uc_enqueue_received_message [
                label="enqueue\nreceived\nmessage"
                shape=ellipse
                fillcolor=green
            ];
	    reception_api -> post_msg_from_bc [dir=back];

        }

        subgraph cluster_chan {
            label="channel specific";
            repo_bc_channel [
                label="<<blockchain>>\nchannels"
                fillcolor=orange
                shape=folder
            ];
            scbcep [
                label="<<docker>>\nsingle-channel\nblockchain\nevent processor"
            ];
            uc_bc_rx_events [
                 label="receive\ninbound\nblockchain\nevents"
                 shape=ellipse
    	         fillcolor=orange
            ];
            scbcep -> uc_bc_rx_events;
            uc_bc_rx_events -> repo_bc_channel;
        }

	subgraph cluster_router {
            label="message router";
            mcu [label="<<docker>>\nmulti-channel\nblockchain\nrouter"];
            uc_bc_tx_submit [
                label="submit\nblockchain\ntransactions"
                shape=ellipse
                fillcolor=orange
            ];
            w_api_inout [
	        label="<<docker>>\nmessage\nreception\nworker"
	    ];
            uc_api_inout [
                label="enqueue\ninbound\nmessages"
                shape=ellipse fillcolor=green
            ];
            repo_api_outbox [
	        label="<<rdbms>>\nAPI\noutbox"
		fillcolor=green
	    ];
        }

    }
    
    //subgraph cluster_object_rover {
    //    label="Back Office Tasks";
        uc_get_objects [
            label="retrieve and store\nforeign documents"
            shape=ellipse
            fillcolor=green
        ];
        spider [label="<<docker>>\ndocument\nspider"];
        repo_foreign_objects [label="foreign\nobject\nproxy"];
	mp [label="<<docker>>\ninbound\nmessage\nprocessor"]
        uc_bc_proc_events [
            label="initiate\ninbound message\nprocessing tasks"
            shape=ellipse
            fillcolor=green
        ];
	repo_foreign_objects -> uc_get_objects;
	spider -> uc_get_objects;
	mp -> uc_bc_proc_events;
    //}

    subgraph cluster_sueues {
        label="Task Queues";
        repo_bc_inbox [
	    label="<<sqs>>\nblockchain\ninbox"
	    fillcolor=green
	];
	repo_api_inbox [label="<<sqs>>\nAPI\ninbox" fillcolor=green];
        repo_object_ret_q [
            label="<<sqs>>\nobject\nretreival"
            fillcolor=green
        ];
    }

    subgraph cluster_lake {
        label="Data Lake";
        repo_message_lake [
	    label="<<s3>>\nmessage\nlake"
	    fillcolor=orange
	];
        repo_object_lake [
	    label="<<s3>>\nobject\nlake"
	    fillcolor=orange
	];
        repo_object_acl [
	    label="<<s3>>\nobject\nACL"
	    fillcolor=orange
	];
    }
}

uc_bc_rx_events -> post_msg_from_bc;

uc_bc_proc_events -> repo_bc_inbox;
ucp_doc -> doc_api;
repo_api_inbox -> uc_api_inout [dir=back];
uc_api_inout -> repo_api_outbox;
uc_api_inout -> w_api_inout [dir=back];
repo_bc_inbox -> uc_enqueue_received_message [dir=back];
uc_enqueue_received_message -> reception_api [dir=back];
ucp_msg -> msg_api;
ucp_sub -> websub;
doc_api -> uc_authenticated_object_access -> repo_object_acl;
uc_authenticated_object_access -> repo_object_lake;
doc_api -> uc_record_object -> repo_object_lake;
msg_api -> uc_check_message -> repo_message_lake;
msg_api -> uc_submit_message -> repo_api_inbox;
mcu -> uc_bc_tx_submit;
uc_bc_tx_submit -> repo_api_outbox;
uc_bc_tx_submit -> repo_bc_channel;

websub -> uc_bc_proc_events [dir=back];
repo_object_acl -> uc_bc_proc_events [dir=back];
repo_message_lake -> uc_bc_proc_events [dir=back];
uc_rx_callback -> websub [dir=back];
repo_object_lake -> uc_get_objects [dir=back];

uc_bc_proc_events -> repo_object_ret_q;
uc_get_objects -> repo_object_ret_q;
}
